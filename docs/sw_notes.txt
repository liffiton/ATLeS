FishyCam on the Raspberry Pi
============================

OS Setup
--------

Using the provided image:
  * Log in with username 'pi', default password 'fishypi'.

[TODO: Issues w/ current build]
  * ~pi/fishycam is cloned from hyperion

Alternatively, if you want to set up the environment yourself, refer to the
following sections.


Installing FishyCam from Scratch
================================

Python Package Dependencies
---------------------------

Before installing the python modules themselves, install the required tools:

  $ sudo apt-get install build-essential pkg-config

... and libraries:

  $ sudo apt-get install python-dev libpng-dev libfreetype6-dev

Many python packages are most easily installed via pip.  To install pip,
follow the instructions here: https://pip.pypa.io/en/latest/installing.html

The fishbox scripts rely on the following libraries (instructions for
installing these follow):

  fishbox.py:
    cv2         (for OpenCV)
    smbus       (for reading sensor values)
    wiringpi2   (for controlling light bar via PWM)
  
  fishweb.py:
    bottle
    cherrypy
    Jinja2
    wtforms
    python-daemon
    matplotlib
    numpy
  
  fishremote.py:
    rpyc
    zeroconf

Note: the matplotlib and numpy packages available via apt-get are too old to use in FishyCam.

To install cv2, see opencv_notes.txt.

To install smbus:
  $ sudo apt-get install python-smbus

To install all of the remaining but matplotlib:
  $ sudo pip install wiringpi2 bottle cherrypy Jinja2 wtforms python-daemon numpy rpyc zeroconf

To install matplotlib, we have to work around an issue with pip.  'pip install matplotlib' fails on a stock RPi (both models 1 and 2) with a memory error.  To work around this, install it without using the cache (thanks to: http://stackoverflow.com/a/31526029):
  $ sudo pip install --no-cache-dir matplotlib


Runtime dependencies
--------------------

Additional packages required to run the fishbox/fishremote software:

  rsync

Install with:

  sudo apt-get install rsync

Both the camera and i2c need to be enabled using raspi-config.  Run
'sudo raspi-config' and enable both (i2c is under "advanced options").

To use the camera via v4l, the bcm2835-v4l2 module must be loaded.

For the i2c interface (for sensors), the i2c-dev module must be loaded.

To have the modules loaded automatically on boot, add each to /etc/modules, one
per line:

  bcm2835-v4l2
  i2c-dev

Alternatively, modprobe can be used to load them manually at any time:

  sudo modprobe bcm2835-v4l2
  sudo modprobe i2c-dev


Notes on Running FishyCam
=========================

Framerate
---------

The capture framerate is sensitive to many things.

First, displaying the captured frames using highgui takes a huge amount of CPU time, making it infeasible (i.e., maxing out CPU) above 10fps.  Without displaying the images, however, CPU usage doesn't hit 100% until about 50fps.

Secondly, the capture size obviously makes a difference.  There is currently some bug in the interaction between OpenCV and V4L that makes it impossible to change the capture size after the stream is opened in OpenCV (at its default 640x480 size).  See opencv_notes.txt for directions for how to modify and compile OpenCV to fix this bug.  The fix allows us to set the video capture size smaller for better performance.  160x120 seems nice and fast, and we have lots of flexibility now.

Also, it is important to note that terminal output, displayed on the rpi's X server, uses a large amount of the CPU as well.  Simply switching to a different tab while FPS output is enabled in camtest.py drops the CPU usage significantly.  Keep this in mind particularly during testing, where debugging output may significantly harm performance.


Exposure and white balance
--------------------------

Auto white balance can be disabled with:
 v4l2-ctl --set-ctrl=white_balance_auto_preset=1
 v4l2-ctl --set-ctrl=white_balance_auto_preset=0

It does seem to need to be set to 1 then back to 0 to work, at least sometimes.  Without that, AWB is somehow enabled between(?) runs, and just setting the preset to 0 at the start of the next does not work.  The set to 1 then back does work, it appears.

Exposure can be adjusted with:
 v4l2-ctl --set-ctrl=auto_exposure=1
 v4l2-ctl --set-ctrl=exposure_time_absolute=10000
 v4l2-ctl -p 1

"auto_exposure=1" disables auto exposure (don't ask me...).
"exposure_time_absolute" is given in multiples of 0.1ms.  It needs to be adjusted along with the frame rate (-p) so that they match.  A higher frame rate will clip the exposure to make that frame rate possible.


Display
-------

In X, pygame will make a fullscreen view, but it won't (as far as I've found so far) scale the image.  So if I request 640x480, I get a 640x480 surface in the middle of my monitor.

Running from the terminal, however, does work.  I don't know what interface SDL is using, exactly, but it seems alright.  It seems to only work *once*, though.  Running the program a second time results in a blank screen.  I may be using Pygame incorrectly...

